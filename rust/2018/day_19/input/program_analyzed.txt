#ip 5

r0 = 1
r1 = 0
r2 = 0
r3 = 0
r4 = 0
ip = 0

start:
    jmp setup               # ip=0 - addi 5 16 5

    r3 = 1                  # ip=1 - seti 1 7 3
    r1 = 1                  # ip=2 - seti 1 4 1
    r4 = r3 * r1            # ip=3 - mulr 3 1 4
    r4 = r4 == r2 ? 1 : 0   # ip=4 - eqrr 4 2 4
    ip = ip + r4            # ip=5 - addr 4 5 5
    ip = ip + 1             # ip=6 - addi 5 1 5

    r0 = r3 + r0            # ip=7 - addr 3 0 0

    r1 = r1 + 1             # ip=8 - addi 1 1 1
    r4 = r1 > r2 ? 1 : 0    # ip=9 - gtrr 1 2 4
    ip = ip + r4            # ip=10 - addr 5 4 5
    ip = 2                  # ip=11 - seti 2 1 5

    r3 = r3 + 1             # ip=12 - addi 3 1 3
    r4 = r3 > r2 ? 1 : 0    # ip=13 - gtrr 3 2 4
    ip = ip + r4            # ip=14 - addr 4 5 5
    ip = 1                  # ip=15 - seti 1 4 5
    ip = ip * ip            # ip=16 - mulr 5 5 5 # --> ip = 256 -> end of program

setup: (ip = 17)

    r2 = r2 + 2             # ip=17 - addi 2 2 2
    r2 = r2 * r2            # ip=18 - mulr 2 2 2
    r2 = ip * r2            # ip=19 - mulr 5 2 2
    r2 = r2 * 11            # ip=20 - muli 2 11 2
    # r2 = 836
    r4 = r4 + 1             # ip=21 - addi 4 1 4
    r4 = r4 * r5            # ip=22 - mulr 4 5 4
    r4 = r4 + 19            # ip=23 - addi 4 19 4
    # r4 = 41
    r2 = r2 + r4            # ip=24 - addr 2 4 2
    # r2 = 877
    ip = ip + r0            # ip=25 - addr 5 0 5

    ip = 0                  # ip=26 - seti 0 9 5

    r4 = ip                 # ip=27 - setr 5 7 4
    r4 = r4 * ip            # ip=28 - mulr 4 5 4
    r4 = ip + r4            # ip=29 - addr 5 4 4
    r4 = ip * r4            # ip=30 - mulr 5 4 4
    r4 = r4 * 14            # ip=31 - muli 4 14 4
    r4 = r4 * ip            # ip=32 - mulr 4 5 4
    # r4 = 10550400
    r2 = r2 + r4            # ip=33 - addr 2 4 2
    # r2 = 10551277
    r0 = 0                  # ip=34 - seti 0 9 0
    ip = 0                  # ip=35 - seti 0 6 5


setup:
    if r0 == 0 {
        r2 = 877
    } else {
        r2 = 10551277
    }

main:
    r3 = 1

    // r3 & r1 are incremented in nested loops.
    // r0 is incremented whenever r1 * r3 equals r2 (from setup)
    while r3 <= r2 {
        r1 = 1

        while r1 <= r2 {
            if r3 * r1 == r2 {
                r0 = r0 + r3
            }
            r1 = r1 + 1
        }

        r3 = r3 + 1
    }


